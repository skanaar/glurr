use std::{collections::HashMap};

#[derive(Clone, Copy, PartialEq)]
pub enum Mode { Compile, Def, Var, Quote, Comment }

#[derive(Clone, Copy, PartialEq)]
pub enum Token {
    Native(Nat),
    Control(Mode),
    Jump(usize),
    Number(f64),
    Bool(bool),
    Str(usize),
    Word(usize),
    Symbol(usize),
    Var(usize),
    Array(usize),
    Empty,
}
impl Token {
    pub(crate) fn to_string(&self) -> String {
        match self {
            Token::Native(native) => {
                let nats = create_natives();
                if let Some(pair) = nats.iter().find(|e| e.1 == native) {
                    let name = pair.0;
                    return format!("Native({})", name);
                }
                panic!("unknown native");
            },
            Token::Control(Mode::Compile) => "Compile".to_string(),
            Token::Control(Mode::Def) => "Def".to_string(),
            Token::Control(Mode::Var) => "Var".to_string(),
            Token::Control(Mode::Quote) => "Quote".to_string(),
            Token::Control(Mode::Comment) => "Comment".to_string(),
            Token::Jump(index) => format!("Jump({})", index),
            Token::Number(value) => value.to_string(),
            Token::Bool(value) => value.to_string(),
            Token::Str(value) => format!("String({})", value),
            Token::Word(index) => format!("Word({})", index),
            Token::Var(index) => format!("Var({})", index),
            Token::Array(index) => format!("Array({})", index),
            Token::Symbol(index) => format!("Symbol({})", index),
            Token::Empty => "Empty".to_string(),
        }
    }
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Nat {
    Include = 0,
    Debug,
    Def,
    Var,
    Quote,
    OpenBrace,
    CloseBrace,
    Semicolon,
    StoreCtrl,
    ReadCtrl,
    CopyCtrl,
    Invoke,
    ByteArray,
    Set,
    Get,
    DisplayImage,
    Questionmark,
    If,
    Loop,
    Range,
    Enumerate,
    LeaveIf,
    I,
    OpenParen,
    CloseParen,
    Comment,
    Dot,
    Dots,
    CtrlDots,
    Drop,
    Plus,
    Minus,
    Multiply,
    Divide,
    Pow,
    Mod,
    Floor,
    Ceil,
    Round,
    Abs,
    Neg,
    Equal,
    GreaterThan,
    LessThan,
    Not,
    True,
    False,
    Swap,
    Rot,
    Pick,
    Over,
    Dup,
    Assign,
    Read,
    Write,
}

pub fn create_natives() -> HashMap<&'static str, Nat> {
    return HashMap::from([
        ("include", Nat::Include),
        ("debug", Nat::Debug),
        ("def", Nat::Def),
        ("var", Nat::Var),
        ("'", Nat::Quote),
        ("{", Nat::OpenBrace),
        ("}", Nat::CloseBrace),
        (";", Nat::Semicolon),
        (">§", Nat::StoreCtrl),
        ("§>", Nat::ReadCtrl),
        ("§copy", Nat::CopyCtrl),
        ("invoke", Nat::Invoke),
        ("byte-array", Nat::ByteArray),
        ("set", Nat::Set),
        ("get", Nat::Get),
        ("display-image", Nat::DisplayImage),
        ("?", Nat::Questionmark),
        ("if", Nat::If),
        ("loop", Nat::Loop),
        ("range", Nat::Range),
        ("enumerate", Nat::Enumerate),
        ("leave-if", Nat::LeaveIf),
        ("i", Nat::I),
        ("(", Nat::OpenParen),
        (")", Nat::CloseParen),
        ("--", Nat::Comment),
        (".", Nat::Dot),
        ("...", Nat::Dots),
        ("§..", Nat::CtrlDots),
        ("drop", Nat::Drop),
        ("+", Nat::Plus),
        ("-", Nat::Minus),
        ("*", Nat::Multiply),
        ("/", Nat::Divide),
        ("pow", Nat::Pow),
        ("mod", Nat::Mod),
        ("floor", Nat::Floor),
        ("ceil", Nat::Ceil),
        ("round", Nat::Round),
        ("abs", Nat::Abs),
        ("neg", Nat::Neg),
        ("=", Nat::Equal),
        (">", Nat::GreaterThan),
        ("<", Nat::LessThan),
        ("not", Nat::Not),
        ("true", Nat::True),
        ("false", Nat::False),
        ("swap", Nat::Swap),
        ("rot", Nat::Rot),
        ("pick", Nat::Pick),
        ("over", Nat::Over),
        ("dup", Nat::Dup),
        ("=:", Nat::Assign),
        ("@", Nat::Read),
        ("!", Nat::Write),
    ])
}
