use std::collections::HashMap;

#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum Native {
    Include = 0,
    Debug,
    Def,
    Quote,
    OpenBrace,
    CloseBrace,
    Semicolon,
    Invoke,
    ByteArray,
    Set,
    Get,
    DisplayImage,
    Questionmark,
    If,
    Loop,
    Range,
    Enumerate,
    LeaveIf,
    I,
    OpenParen,
    Comment,
    StoreCtrl,
    ReadCtrl,
    CopyCtrl,
    Dot,
    Dots,
    Drop,
    Plus,
    Minus,
    Multiply,
    Divide,
    Pow,
    Mod,
    Floor,
    Ceil,
    Round,
    Abs,
    Neg,
    Equal,
    GreaterThan,
    LessThan,
    Not,
    True,
    False,
    Swap,
    Rot,
    Pick,
    Over,
    Dup,
    Assign,
    Read,
    Write,
}

#[derive(Debug, Clone, PartialEq)]
pub enum Token {
    Native(Native),
    Control(f64),
    Jump(usize),
    Number(f64),
    Bool(bool),
    String(String),
    Word(usize),
    Symbol(usize),
    Empty,
    End,
}

pub fn create_natives() -> HashMap<&'static str, Native> {
    return HashMap::from([
        ("include", Native::Include),
        ("debug", Native::Debug),
        ("def", Native::Def),
        ("'", Native::Quote),
        ("{", Native::OpenBrace),
        ("}", Native::CloseBrace),
        (";", Native::Semicolon),
        ("invoke", Native::Invoke),
        ("byte-array", Native::ByteArray),
        ("set", Native::Set),
        ("get", Native::Get),
        ("display-image", Native::DisplayImage),
        ("?", Native::Questionmark),
        ("if", Native::If),
        ("loop", Native::Loop),
        ("range", Native::Range),
        ("enumerate", Native::Enumerate),
        ("leave-if", Native::LeaveIf),
        ("i", Native::I),
        ("(", Native::OpenParen),
        ("--", Native::Comment),
        (">§", Native::StoreCtrl),
        ("§>", Native::ReadCtrl),
        ("§copy", Native::CopyCtrl),
        (".", Native::Dot),
        ("...", Native::Dots),
        ("drop", Native::Drop),
        ("+", Native::Plus),
        ("-", Native::Minus),
        ("*", Native::Multiply),
        ("/", Native::Divide),
        ("pow", Native::Pow),
        ("mod", Native::Mod),
        ("floor", Native::Floor),
        ("ceil", Native::Ceil),
        ("round", Native::Round),
        ("abs", Native::Abs),
        ("neg", Native::Neg),
        ("=", Native::Equal),
        (">", Native::GreaterThan),
        ("<", Native::LessThan),
        ("not", Native::Not),
        ("true", Native::True),
        ("false", Native::False),
        ("swap", Native::Swap),
        ("rot", Native::Rot),
        ("pick", Native::Pick),
        ("over", Native::Over),
        ("dup", Native::Dup),
        ("=:", Native::Assign),
        ("@", Native::Read),
        ("!", Native::Write),
    ])
}
